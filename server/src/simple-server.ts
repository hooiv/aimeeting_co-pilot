import express from 'express';
import cors from 'cors';
import { createServer } from 'http';
import { Server as SocketIOServer } from 'socket.io';

const app = express();
const server = createServer(app);
const io = new SocketIOServer(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"]
  }
});

// Middleware
app.use(cors({
  origin: "http://localhost:3000",
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    environment: 'development'
  });
});

// Auth routes
app.post('/api/auth/login', (req, res) => {
  const { email, password } = req.body;
  
  // Mock authentication
  if (email === 'admin@example.com' && password === 'password') {
    res.json({
      success: true,
      data: {
        user: {
          id: '1',
          email: 'admin@example.com',
          displayName: 'Admin User',
          role: 'admin'
        },
        accessToken: 'mock-access-token',
        refreshToken: 'mock-refresh-token'
      }
    });
  } else if (email === 'user@example.com' && password === 'password') {
    res.json({
      success: true,
      data: {
        user: {
          id: '2',
          email: 'user@example.com',
          displayName: 'Regular User',
          role: 'user'
        },
        accessToken: 'mock-access-token',
        refreshToken: 'mock-refresh-token'
      }
    });
  } else {
    res.status(401).json({
      success: false,
      error: {
        code: 'INVALID_CREDENTIALS',
        message: 'Invalid email or password'
      }
    });
  }
});

app.post('/api/auth/register', (req, res) => {
  const { email, password, displayName } = req.body;
  
  res.json({
    success: true,
    data: {
      user: {
        id: Date.now().toString(),
        email,
        displayName,
        role: 'user'
      },
      accessToken: 'mock-access-token',
      refreshToken: 'mock-refresh-token'
    }
  });
});

app.get('/api/auth/profile', (req, res) => {
  res.json({
    success: true,
    data: {
      user: {
        id: '1',
        email: 'admin@example.com',
        displayName: 'Admin User',
        role: 'admin'
      }
    }
  });
});

// Meeting routes
app.get('/api/meetings', (req, res) => {
  res.json({
    success: true,
    data: {
      meetings: [
        {
          id: '1',
          title: 'Team Standup',
          description: 'Daily team standup meeting',
          startTime: new Date().toISOString(),
          status: 'scheduled',
          hostId: '1'
        },
        {
          id: '2',
          title: 'Project Review',
          description: 'Weekly project review',
          startTime: new Date(Date.now() + 3600000).toISOString(),
          status: 'scheduled',
          hostId: '1'
        }
      ]
    }
  });
});

app.post('/api/meetings', (req, res) => {
  const { title, description, startTime } = req.body;
  
  res.json({
    success: true,
    data: {
      meeting: {
        id: Date.now().toString(),
        title,
        description,
        startTime,
        status: 'scheduled',
        hostId: '1'
      }
    }
  });
});

app.get('/api/meetings/:id', (req, res) => {
  const { id } = req.params;
  
  res.json({
    success: true,
    data: {
      meeting: {
        id,
        title: 'Sample Meeting',
        description: 'This is a sample meeting',
        startTime: new Date().toISOString(),
        status: 'active',
        hostId: '1'
      }
    }
  });
});

// AI routes
app.post('/api/ai/transcribe', (req, res) => {
  res.json({
    success: true,
    data: {
      transcript: 'This is a mock transcription result.',
      confidence: 0.95,
      language: 'en'
    }
  });
});

app.post('/api/ai/analyze-sentiment', (req, res) => {
  res.json({
    success: true,
    data: {
      sentiment: 'positive',
      confidence: 0.87,
      emotions: {
        joy: 0.6,
        neutral: 0.3,
        sadness: 0.1
      }
    }
  });
});

app.post('/api/ai/generate-summary', (req, res) => {
  res.json({
    success: true,
    data: {
      summary: 'This is a mock meeting summary generated by AI.',
      keyPoints: [
        'Discussed project timeline',
        'Reviewed budget allocation',
        'Assigned action items'
      ],
      actionItems: [
        {
          id: '1',
          text: 'Complete project proposal',
          assignedTo: 'John Doe',
          dueDate: new Date(Date.now() + 86400000).toISOString()
        }
      ]
    }
  });
});

// WebSocket handling
io.on('connection', (socket) => {
  console.log('User connected:', socket.id);

  socket.on('join-meeting', (meetingId) => {
    socket.join(meetingId);
    socket.to(meetingId).emit('user-joined', {
      userId: socket.id,
      timestamp: new Date().toISOString()
    });
  });

  socket.on('leave-meeting', (meetingId) => {
    socket.leave(meetingId);
    socket.to(meetingId).emit('user-left', {
      userId: socket.id,
      timestamp: new Date().toISOString()
    });
  });

  socket.on('meeting-message', (data) => {
    socket.to(data.meetingId).emit('meeting-message', {
      ...data,
      timestamp: new Date().toISOString()
    });
  });

  socket.on('transcript-update', (data) => {
    socket.to(data.meetingId).emit('transcript-update', {
      ...data,
      timestamp: new Date().toISOString()
    });
  });

  socket.on('ai-insight', (data) => {
    socket.to(data.meetingId).emit('ai-insight', {
      ...data,
      timestamp: new Date().toISOString()
    });
  });

  socket.on('whiteboard-update', (data) => {
    socket.to(data.meetingId).emit('whiteboard-update', {
      ...data,
      timestamp: new Date().toISOString()
    });
  });

  socket.on('disconnect', () => {
    console.log('User disconnected:', socket.id);
  });
});

// Catch all route
app.get('*', (req, res) => {
  res.status(404).json({
    success: false,
    error: {
      code: 'NOT_FOUND',
      message: 'Route not found'
    }
  });
});

const PORT = process.env.PORT || 5000;

server.listen(PORT, () => {
  console.log(`🚀 Server running on port ${PORT}`);
  console.log(`📊 Environment: development`);
  console.log(`🔗 WebSocket server active`);
  console.log(`💾 Mock database active`);
  console.log(`🔴 Mock Redis active`);
  console.log(`🌐 CORS enabled for http://localhost:3000`);
  console.log(`📡 API available at http://localhost:${PORT}/api`);
  console.log(`❤️  Health check at http://localhost:${PORT}/health`);
});

export { app, server, io };
